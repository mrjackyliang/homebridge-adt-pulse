name: "Publish to npm registries"

run-name: "Publishing ${{ github.event.release.tag_name || 'manually' }} to npm registries"

on:
  release:
    types: [ "published" ]
  workflow_dispatch:
    inputs:
      publish-to-github-packages:
        description: "Publish to GitHub Packages"
        required: true
        type: "boolean"
        default: false
      publish-to-npmjs:
        description: "Publish to npm.js"
        required: true
        type: "boolean"
        default: false

permissions:
  contents: "read"

env:
  PUBLISH_TO_GITHUB: ${{ github.event_name == 'release' || (github.event_name == 'workflow_dispatch' && inputs['publish-to-github-packages']) }}
  PUBLISH_TO_NPMJS: ${{ github.event_name == 'release' || (github.event_name == 'workflow_dispatch' && inputs['publish-to-npmjs']) }}
  WORKING_DIR: "./"

jobs:
  publish-to-github-packages:
    runs-on: "ubuntu-latest"
    timeout-minutes: 10
    permissions:
      packages: "write"
    env:
      NODE_AUTH_TOKEN: "${{ secrets.GITHUB_TOKEN }}"
    steps:
      - name: "Checkout repository"
        uses: "actions/checkout@v5"

      - name: "Setup Node.js"
        uses: "actions/setup-node@v6"
        with:
          node-version-file: "${{ env.WORKING_DIR }}/package.json"
          package-manager-cache: false
          registry-url: "https://npm.pkg.github.com"
          scope: "@${{ github.repository_owner }}"

      - name: "Remove deprecated .npmrc entries"
        run: |
          npmrc="${NPM_CONFIG_USERCONFIG:-$HOME/.npmrc}"

          if [ -f "$npmrc" ]; then
            sed -i '/^always-auth=/d' "$npmrc"
          fi
        working-directory: "${{ env.WORKING_DIR }}"

      - name: "Install packages"
        run: |
          npm install -g npm@latest
          npm install
        working-directory: "${{ env.WORKING_DIR }}"

      - name: "Build project"
        run: |
          npm run build
        working-directory: "${{ env.WORKING_DIR }}"

      - name: "Change to scoped package name"
        run: |
          REPOSITORY_OWNER="@${{ github.repository_owner }}"
          PACKAGE_NAME=$(npm pkg get name --workspaces=false | jq -r '.')

          echo "Owner scope is \"${REPOSITORY_OWNER}\" and package name is \"${PACKAGE_NAME}\"."

          echo "PACKAGE_NAME=$PACKAGE_NAME" >> "$GITHUB_ENV"

          if [[ "$PACKAGE_NAME" != "$REPOSITORY_OWNER/"* ]]; then
            BASE=${PACKAGE_NAME##*/}
            NEW_NAME="$REPOSITORY_OWNER/$BASE"

            echo "Package name not scoped; scoping package name to \"${NEW_NAME}\"."

            npm pkg set name="$NEW_NAME"
          else
            echo "Package name already scoped; no changes needed."
          fi
        working-directory: "${{ env.WORKING_DIR }}"

      - name: "Publish package to GitHub Packages"
        run: |
          if [ "${PUBLISH_TO_GITHUB}" = "true" ]; then
            echo "MODE: PRODUCTION"
            npm publish
          else
            echo "MODE: DRY RUN"
            npm publish --dry-run
          fi
        working-directory: "${{ env.WORKING_DIR }}"

      - name: "Restore package name"
        if: ${{ always() && env.PACKAGE_NAME }}
        run: |
          npm pkg set name="$PACKAGE_NAME"
        working-directory: "${{ env.WORKING_DIR }}"

  publish-to-npmjs:
    runs-on: "ubuntu-latest"
    timeout-minutes: 10
    permissions:
      id-token: "write"
    steps:
      - name: "Checkout repository"
        uses: "actions/checkout@v5"

      - name: "Setup Node.js"
        uses: "actions/setup-node@v6"
        with:
          node-version-file: "${{ env.WORKING_DIR }}/package.json"
          package-manager-cache: false
          registry-url: "https://registry.npmjs.org"

      - name: "Remove deprecated .npmrc entries"
        run: |
          npmrc="${NPM_CONFIG_USERCONFIG:-$HOME/.npmrc}"

          if [ -f "$npmrc" ]; then
            sed -i '/^always-auth=/d' "$npmrc"
          fi
        working-directory: "${{ env.WORKING_DIR }}"

      - name: "Install packages"
        run: |
          npm install -g npm@latest
          npm install
        working-directory: "${{ env.WORKING_DIR }}"

      - name: "Build project"
        run: |
          npm run build
        working-directory: "${{ env.WORKING_DIR }}"

      - name: "Publish package to npm.js"
        run: |
          if [ "${PUBLISH_TO_NPMJS}" = "true" ]; then
            echo "MODE: PRODUCTION"
            npm publish
          else
            echo "MODE: DRY RUN"
            npm publish --dry-run
          fi
        working-directory: "${{ env.WORKING_DIR }}"
